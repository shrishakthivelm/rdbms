------------------------------TRIGGERS-----------------------------------

SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TRIGGER_NAME
BEFORE DELETE OR INSERT OR UPDATE ON CUSTOMERS
FOR EACH ROW
WHEN (NEW.ID > 0)
DECLARE
SALARY_DIFF NUMBER;
BEGIN
SALARY_DIFF := :NEW.SALARY - :OLD.SALARY;
DBMS_OUTPUT.PUT_LINE('OLD SALARY : '||:OLD.SALARY);
DBMS_OUTPUT.PUT_LINE('NEW SALARY : '||:NEW.SALARY);
DBMS_OUTPUT.PUT_LINE('SALARY DIFFERENCE : '||SALARY_DIFF);
END;
/
INSERT INTO CUSTOMERS
VALUES (7,'Kirti',22,'HP',7500.00);
UPDATE CUSTOMERS
SET SALARY = SALARY + 1000
WHERE ID = 2;

--1
CREATE TABLE ORDER_TABLE(
ORDER_ID NUMBER(5),
QUANTITY NUMBER(4),
COST_PER_ITEM NUMBER(6,2),
TOTAL_COST NUMBER(8,2),
CREATE_DATE TIMESTAMP,
CREATED_BY VARCHAR2(10),
CONSTRAINT ORDERS_PK PRIMARY KEY (ORDER_ID)
);
CREATE OR REPLACE TRIGGER INSERT_ORDER
BEFORE INSERT ON ORDER_TABLE
FOR EACH ROW
DECLARE
USER_NAME VARCHAR2(20);
BEGIN
SELECT USER
INTO USER_NAME
FROM DUAL;
:NEW.CREATE_DATE := SYSDATE;
:NEW.CREATED_BY := USER_NAME;
DBMS_OUTPUT.PUT_LINE('TABLE MODIFIED BY : '||:NEW.CREATED_BY);
DBMS_OUTPUT.PUT_LINE('DATE OF MODIFICATION : '||:NEW.CREATE_DATE||'
');
END;
/
INSERT INTO ORDER_TABLE
VALUES(1,2,70.9,500,TO_DATE('2024-09-29','YYYY-MM-DD'),'Ashwin');
INSERT INTO ORDER_TABLE
VALUES(2,9,80.75,200.3,NULL,NULL);

--2
CREATE OR REPLACE TRIGGER UPDATE_ORDER
BEFORE UPDATE ON ORDER_TABLE
FOR EACH ROW
DECLARE
USER_NAME VARCHAR2(20);
BEGIN
SELECT USER
INTO USER_NAME
FROM DUAL;
:NEW.CREATE_DATE := SYSDATE;
:NEW.CREATED_BY := USER_NAME;
DBMS_OUTPUT.PUT_LINE('
RECORD UPDATED :');
DBMS_OUTPUT.PUT_LINE('RECORD UPDATED BY : '||:NEW.CREATED_BY);
DBMS_OUTPUT.PUT_LINE('RECORD UPDATED AT : '||:NEW.CREATE_DATE);
END UPDATE_ORDER;
/
UPDATE ORDER_TABLE
SET COST_PER_ITEM = COST_PER_ITEM + 100;

--3
CREATE TABLE ORDER_TABLE2(
ORDER_ID NUMBER(5),
QUANTITY NUMBER(4),
COST_PER_ITEM NUMBER(6,2),
TOTAL_COST NUMBER(8,2),
CONSTRAINT ORDER_TABLE2_PK PRIMARY KEY (ORDER_ID)
);
CREATE TABLE ORDER_AUDIT(
ORDER_ID NUMBER(5),
QUANTITY NUMBER(4),
COST_PER_ITEM NUMBER(6,2),
TOTAL_COST NUMBER(8,2),
USER_NAME VARCHAR2(20)
);
CREATE OR REPLACE TRIGGER ORDER_INSERT_UPDATE
AFTER INSERT OR UPDATE ON ORDER_TABLE2
FOR EACH ROW
DECLARE
USER_NAME VARCHAR2(20);
BEGIN
SELECT USER
INTO USER_NAME
FROM DUAL;
INSERT INTO ORDER_AUDIT
VALUES(:NEW.ORDER_ID,:NEW.QUANTITY,:NEW.COST_PER_ITEM,:NEW.TOTAL_COST,USER_NA
ME);
END;
/
INSERT INTO ORDER_TABLE2
VALUES(1,2,70.9,500);
INSERT INTO ORDER_TABLE2
VALUES(2,9,35.75,207.44);
UPDATE ORDER_TABLE2
SET QUANTITY = QUANTITY + 1
WHERE ORDER_ID = 2;
SELECT *
FROM ORDER_AUDIT;

--4
CREATE TABLE ORDER_AUDIT2(
ORDER_ID NUMBER(5),
QUANTITY NUMBER(4),
COST_PER_ITEM NUMBER(6,2),
TOTAL_COST NUMBER(8,2),
DELETE_DATE TIMESTAMP,
DELETED_BY VARCHAR2(20)
);
DROP TABLE ORDER_AUDIT2;
CREATE OR REPLACE TRIGGER ORDER_DELETE
BEFORE DELETE ON ORDER_TABLE2
FOR EACH ROW
DECLARE
USER_NAME VARCHAR2(20);
BEGIN
SELECT USER
INTO USER_NAME
FROM DUAL;
INSERT INTO ORDER_AUDIT2
VALUES(:OLD.ORDER_ID,:OLD.QUANTITY,:OLD.COST_PER_ITEM,:OLD.TOTAL_COST,SYSDATE,U
SER_NAME);
END;
/
DELETE FROM ORDER_TABLE2;
SELECT *
FROM ORDER_AUDIT2;

--------------------------------PROCEDURE-----FUNCTIONS-----------------------------------------
--SET SERVEROUTPUT ON;

--1)
--DECLARE
--    message varchar(20):='hello, world!';
--BEGIN
--    dbms_output.put_line(message);
--END;
--/



--2)
--DECLARE
--    SUBTYPE name is char(10);
--    SUBTYPE message is varchar(50);
--    salutation name;
--    greetings message;
--BEGIN
--    salutation := 'Reader';
--    greetings := 'welcome to PL/SQL programming!';
--    dbms_output.put_line('Hello ' || salutation || greetings);
--END;
--/



--3)
--BEGIN
--    dbms_output.put_line(10 + 5);
--END;
--/



--4)
--CREATE TABLE CUSTOMERS_SAMPLE
--(
--    ID INT NOT NULL,
--    NAME VARCHAR (20) NOT NULL,
--    AGE INT NOT NULL,
--    ADDRESS CHAR (25),
--    SALARY DECIMAL (18, 2),
--    PRIMARY KEY (ID)
--);
--
--INSERT INTO CUSTOMERS_SAMPLE (ID,NAME,AGE,ADDRESS,SALARY)
--VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
--INSERT INTO CUSTOMERS_SAMPLE (ID,NAME,AGE,ADDRESS,SALARY)
--VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );
--INSERT INTO CUSTOMERS_SAMPLE (ID,NAME,AGE,ADDRESS,SALARY)
--VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );
--INSERT INTO CUSTOMERS_SAMPLE (ID,NAME,AGE,ADDRESS,SALARY)
--VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );
--INSERT INTO CUSTOMERS_SAMPLE (ID,NAME,AGE,ADDRESS,SALARY)
--VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );
--INSERT INTO CUSTOMERS_SAMPLE (ID,NAME,AGE,ADDRESS,SALARY)
--VALUES (6, 'Komal', 22, 'MP', 4500.00 );

--DECLARE
--    c_id customers_sample.id%type := 1;
--    c_name customers_sample.name%type;
--    c_age customers_sample.age%type;
--    c_addr customers_sample.address%type;
--    c_sal customers_sample.salary%type;
--
--BEGIN
--    select name,age,address,salary into c_name, c_age, c_addr, c_sal
--    from customers_sample
--    where id = c_id;
--
--    dbms_output.put_line
--    ('customer ' || c_name || ' who is ' || c_age || 'yrs old and
from ' || c_addr || ' earns ' || c_sal || ' rupees' );
--
--END;
--/



--5)
--DECLARE
--    a number := 15;
--    b number := 4;
--    c number := 10;
--BEGIN
--    if ( a < b ) and ( a < c ) then
--        dbms_output.put_line ( a || ' is the samllest');
--    elsif ( b < c ) then
--        dbms_output.put_line ( b || ' is the smallest');
--    else
--        dbms_output.put_line ( c || ' is the smallest');
--    end if;
--END;
--/



--6)
--DECLARE
--    PROCEDURE compare (value varchar, pattern varchar) is
--    BEGIN
--        IF value LIKE pattern THEN
--            dbms_output.put_line ('True - pattern matches');
--        ELSE
--            dbms_output.put_line ('False - pattern does not match');
--        END IF;
--    END;
--
--BEGIN
--    compare('Zara Ali', 'Z%A_i');
--    compare('Nuha Ali', 'Z%A_i');
--END;
--/



--7)
--DECLARE
--    n INT := &n;
--BEGIN
--    if (n between 10 and 20) then
--        dbms_output.put_line('Yes');
--    else
--        dbms_output.put_line('No');
--    end if;
--END;
--/



--8)
--DECLARE
--    c_id customers_sample.id%type := &c_id;
--    c_sal customers_sample.salary%type;
--BEGIN
--    select salary into c_sal
--    from customers_sample
--    where id = c_id;
--
--    if ( c_sal < 2000 ) then
--        update customers_sample
--        set salary = salary + 1000 where id=c_id;
--        dbms_output.put_line('Salary Updated!');
--    end if;
--END;
--/



--9)
--DECLARE
--    i number(3);
--    j number(3);
--BEGIN
--    i := 2;
--    LOOP
--        j := 2;
--        LOOP
--            exit when ((mod(i,j)=0) or (j=i));
--            j := j+1;
--        END LOOP;
--    if ( j = i ) then
--        dbms_output.put_line( i || ' is prime');
--    end if;
--    i := i+1;
--    exit when i=50;
--    end loop;
--END;
--/



--10) / 11)
--CREATE OR REPLACE PROCEDURE findmin(x IN number, y IN number, z IN
number, a OUT number) IS
--BEGIN
--    a := least(x,y,z);
--END;
--/
----execute(create) the procedure first then execute the query below!
--DECLARE
--    x number := &x;
--    y number := &y;
--    z number := &z;
--    a number;
--BEGIN
--    findmin(x,y,z,a);
--    dbms_output.put_line('Minimum is ' || a);
--END;
--/
--(OR)--
--DECLARE
--    a number := &a;
--    b number := &b;
--    c number := &c;
--    d number;
--
--PROCEDURE findMin(a IN number, b IN number, c IN number, d OUT number) IS
--BEGIN
--    d := least(a,b,c);
--END;
--
--BEGIN
--    findMin(a, b, c, d);
--    dbms_output.put_line(' Minimum : ' || d);
--    END;
--/



--12)
--CREATE OR REPLACE PROCEDURE square(x IN OUT number) IS
--BEGIN
--    x := x*x;
--END;
--/
----execute(create) the procedure first then execute the query below!
--DECLARE
--    x number := &x;
--BEGIN
--    square(x);
--    dbms_output.put_line('Square is ' || x);
--END;
--/



--13)
--CREATE OR REPLACE FUNCTION total_customers
--RETURN number IS
--    total number := 0;
--BEGIN
--    select count(*) into total
--    from customers_sample;
--
--    return total;
--END;
--/
--
--DECLARE
--    c number(2);
--BEGIN
--    c := total_customers();
--    dbms_output.put_line( 'Total no. of customers: '|| c );
--END;
--/



--14)
--CREATE OR REPLACE FUNCTION find_Min(x IN number, y IN number)
--RETURN number IS
--    z number;
--BEGIN
--    z := least(x,y);
--    return z;
--END;
--/
--DECLARE
--    x number := &x;
--    y number := &y;
--    z number;
--BEGIN
--    z := find_Min(x,y);
--    dbms_output.put_line('Min is ' || z);
--END;
--/



--15)
--CREATE OR REPLACE FUNCTION factorial(x IN number)
--RETURN number is
--    f number;
--BEGIN
--    IF x=0 THEN
--        f := 1;
--    ELSE
--        f := x*factorial(x-1);
--    END IF;
--    return f;
--END;
--/
--DECLARE
--    x int := &x;
--    f number;
--BEGIN
--    f := factorial(x);
--    dbms_output.put_line('Factorial of ' || x || ': ' || f);
--END;
--/



--16)
--create table country
--(
--    country_id int,
--    country_name varchar(15)
--);
--insert into country values (19, 'China');
--insert into country values (24, 'India');
--insert into country values (9, 'Indonesia');
--insert into country values (37, 'Iran');
--select * from country;

--DECLARE
--    c_name country.country_name%type;
--
--    CURSOR c_country is
--        select country_name from country
--        where country_name like 'I%';
--
--BEGIN
--    OPEN c_country;
--    LOOP
--        FETCH c_country into c_name;
--        EXIT WHEN c_country%notfound;
--
--        dbms_output.put_line(c_name);
--    END LOOP;
--    CLOSE c_country;
--END;
--/



--17)
--create table event
--(
--    event_id int,
--    event_name varchar(30),
--    event_details varchar(70),
--    event_date date
--);
--insert into event values(8, 'Hiroshima', 'The United States dropped
an atomic bomb on the..', TO_DATE('06-08-1945', 'DD-MM-YYYY'));
--insert into event values(20, 'Premier League starts', 'The first
season ended(as it did 11 times subsequent..', TO_DATE('15-08-1992',
'DD-MM-YYYY'));
--insert into event values(22, 'Coup attempt in Russia', 'The 1991
Soviet coup of etat attempt, also known as..', TO_DATE('19-08-1991',
'DD-MM-YYYY'));
--insert into event values(83, 'Slavery abolished', 'The disgrace of
slavery was officially abolished on the..', TO_DATE('01-08-1834',
'DD-MM-YYYY'));
--insert into event values(98, 'The Economist launched', 'The bible of
absolute truth on earth was launched on..', TO_DATE('05-08-1843',
'DD-MM-YYYY'));
--select * from event;
--
--DECLARE
--    e_id event.event_id%type;
--    e_name event.event_name%type;
--    e_details event.event_details%type;
--    e_date event.event_date%type;
--
--    CURSOR  c_event is
--        select event_id, event_name, event_details, event_date from event
--        where EXTRACT(MONTH from event_date)=8;
--
--BEGIN
--    open c_event;
--    LOOP
--        FETCH c_event into e_id, e_name, e_details, e_date;
--        EXIT WHEN c_event%notfound;
--
--        dbms_output.put_line(e_id || '  ' || e_name || '  ' ||
e_details || '  ' || e_date);
--    END LOOP;
--    close c_event;
--END;
--/
----------------------------------------------------CURSORS------------------------------------------------
---problem sheet on cursors

--employee table creation
create table employee(
e_id NUMBER(6) not null,
f_nmae varchar2(25),
l_name varchar2(25),
pn varchar2(20),
h_date date,
j_id varchar2(20),
salary NUMBER(8,2),
c_pct number(2,2),
m_id number(6),
d_id number(4),
primary key(e_id)
);

--- data import to employee table

--= p1
set SERVEROUTPUT on
declare
CURSOR e is
select * from employee;
begin
for i in e loop
dbms_output.put_line('id :' ||i.e_id ||' Name :'||i.f_nmae||' '||i.l_name||' salary :'||i.salary);
end loop;
end;
/

---using procedure
set SERVEROUTPUT on
declare
procedure display is
CURSOR e is
select * from employee;
begin
for i in e loop
dbms_output.put_line('id :' ||i.e_id ||' Name :'||i.f_nmae||' '||i.l_name||' salary :'||i.salary);
end loop;
end;
begin
display;
end;
/

---p2
declare
a number := &a;
PROCEDURE changes(x in number)
is
cursor e is SELECT salary from employee
where d_id = x for update;
begin
for i in e loop
if i.salary > 90000 then
    i.salary := i.salary+i.salary*0.12;
ELSE
    i.salary := i.salary+i.salary*0.20;
end if;
update employee
set salary = i.salary
where CURRENT of e;
end loop;
end;

begin
changes(a);
end;
/

select * from employee;

--- p3
set SERVEROUTPUT on
declare
a employee.e_id%type := &a;
n employee.f_nmae%type;
nl employee.l_name%type;
begin
select f_nmae,l_name into n,nl
from employee
where e_id = a;
dbms_output.put_line(n||' '||nl);
exception
    when NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND');
END;
/
-------------------------------CREATE---TABLE---------------------------------------------------------

/*CREATE TABLE salesman 
(
salesman_id int,
name char(20),
city char(30),
commission decimal(6,5)
);
INSERT INTO salesman values(5001, 'James Hoog', 'New York',0.15);
INSERT INTO salesman values(5002,'Nail Knite' ,'Paris', 0.13);
INSERT INTO salesman values(5003,'Pit ALex' ,'London', 0.13);
INSERT INTO salesman values(5004,'Mc Lyon' ,'Paris', 0.14);
INSERT INTO salesman values(5005,'Lauson Hen' ,NULL, 0.12);
INSERT INTO salesman values(5006,'Paul Adam' ,'Rome', 0.13);
select * from salesman;
select 'this sql excercise , Practice and Solution' as stae from dual;
select 1 as num1,2 as num2,3 as num3 from dual;
select 10+15 as sumof from dual;
select (2*3)+3/4-5 as arithmetic_expr from dual; 
select name,commission from salesman;

CREATE TABLE orders (
    ord_no INT,
    purch_amt DECIMAL(8,2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT
);

INSERT INTO orders VALUES(70001, 150.5, TO_DATE('2012-10-05', 'YYYY-MM-DD'), 3005, 5002);
INSERT INTO orders VALUES(70009, 270.65, TO_DATE('2012-09-10', 'YYYY-MM-DD'), 3001, 5005);
INSERT INTO orders VALUES(70002, 65.26, TO_DATE('2012-10-05', 'YYYY-MM-DD'), 3002, 5001);
INSERT INTO orders VALUES(70004, 110.5, TO_DATE('2012-08-17', 'YYYY-MM-DD'), 3009, 5003);
INSERT INTO orders VALUES(70007, 948.5, TO_DATE('2012-09-10', 'YYYY-MM-DD'), 3005, 5002);
INSERT INTO orders VALUES(70005, 2400.6, TO_DATE('2012-07-27', 'YYYY-MM-DD'), 3007, 5001);
INSERT INTO orders VALUES(70008, 5760, TO_DATE('2012-09-10', 'YYYY-MM-DD'), 3002, 5001);
INSERT INTO orders VALUES(70010, 1983.43, TO_DATE('2012-10-10', 'YYYY-MM-DD'), 3004, 5006);
INSERT INTO orders VALUES(70003, 2480.4, TO_DATE('2012-10-10', 'YYYY-MM-DD'), 3009, 5003);
INSERT INTO orders VALUES(70012, 250.45, TO_DATE('2012-06-27', 'YYYY-MM-DD'), 3008, 5002);
INSERT INTO orders VALUES(70011, 75.29, TO_DATE('2012-08-17', 'YYYY-MM-DD'), 3003, 5007);
INSERT INTO orders VALUES(70013, 3045.6, TO_DATE('2012-04-25', 'YYYY-MM-DD'), 3002, 5001);
select distinct salesman_id from orders;
select name,city from salesman where city ='Paris';


CREATE TABLE customer (
    customer_id INT,
    cust_name VARCHAR(50),
    city VARCHAR(50),
    grade INT,
    salesman_id INT
);

INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3002, 'Nick Rimando', 'New York', 100, 5001);
INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3005, 'Graham Zusi', 'California', 200, 5002);
INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3001, 'Brad Guzan', 'London', NULL, 5005);
INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3004, 'Fabian Johns', 'Paris', 300, 5006);
INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3007, 'Brad Davis', 'New York', 200, 5001);
INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3009, 'Geoff Camero', 'Berlin', 100, 5003);
INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3008, 'Julian Green', 'London', 300, 5002);
INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES (3003, 'Jozy Altidor', 'Moscow', 200, 5007);

select * from customer where grade = 200;
select ord_no,ord_date,purch_amt from orders where salesman_id = 5001;


CREATE TABLE nobel_win (
    YEAR INT,
    SUBJECT VARCHAR(50),
    WINNER VARCHAR(50),
    COUNTRY VARCHAR(50),
    CATEGORY VARCHAR(50)
);

INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Physics', 'Hannes Alfven', 'Sweden', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Physics', 'Louis Neel', 'France', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Chemistry', 'Luis Federico Leloir', 'France', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Physiology', 'Ulf von Euler', 'Sweden', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Physiology', 'Bernard Katz', 'Germany', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Literature', 'Aleksandr Solzhenitsyn', 'Russia', 'Linguist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Economics', 'Paul Samuelson', 'USA', 'Economist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1970, 'Physiology', 'Julius Axelrod', 'USA', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1971, 'Physics', 'Dennis Gabor', 'Hungary', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1971, 'Chemistry', 'Gerhard Herzberg', 'Germany', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1971, 'Peace', 'Willy Brandt', 'Germany', 'Chancellor');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1971, 'Literature', 'Pablo Neruda', 'Chile', 'Linguist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1971, 'Economics', 'Simon Kuznets', 'Russia', 'Economist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1978, 'Peace', 'Anwar al-Sadat', 'Egypt', 'President');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1978, 'Peace', 'Menachem Begin', 'Israel', 'Prime Minister');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1987, 'Chemistry', 'Donald J. Cram', 'USA', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1987, 'Chemistry', 'Jean-Marie Lehn', 'France', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1987, 'Physiology', 'Susumu Tonegawa', 'Japan', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1994, 'Economics', 'Reinhard Selten', 'Germany', 'Economist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1994, 'Peace', 'Yitzhak Rabin', 'Israel', 'Prime Minister');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1987, 'Physics', 'Johannes Georg Bednorz', 'Germany', 'Scientist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1987, 'Literature', 'Joseph Brodsky', 'Russia', 'Linguist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1987, 'Economics', 'Robert Solow', 'USA', 'Economist');
INSERT INTO nobel_win (YEAR, SUBJECT, WINNER, COUNTRY, CATEGORY) VALUES (1994, 'Literature', 'Kenzaburo Oe', 'Japan', NULL);


select winner from nobel_win where year= 1971;
select year,subject from nobel_win where winner = 'Dennis Gabor';
select winner from nobel_win where subject= 'Physics' and year >= 1950;
select year,subject,winner,country from nobel_win where subject = 'Chemistry' and year BETWEEN 1965 and 1975;
select * from nobel_win where category = 'Prime Minister' and year >1972;
select * from nobel_win where winner like 'Louis%';
select winner from nobel_win where (subject='Physics' and year = 1970)or (subject ='Economics' and year =1971);
select winner from nobel_win where (year = 1970 and subject!='Physiology') and (year =1970 and subject !='Economics');
select winner from nobel_win where (winner = 'Physiology' and year <1971) or (winner = 'Peace' and year >1974);
select * from nobel_win where winner = 'Johannes Georg Bednorz';
select * from nobel_win where subject not like 'P%' order by year desc, winner desc;
select * from nobel_win where year =1970 
SELECT * FROM nobel_win WHERE YEAR = 1970
ORDER BY 
  CASE 
    WHEN SUBJECT = 'Economics' THEN 2   
    WHEN SUBJECT = 'Chemistry' THEN 3 
    ELSE 1  
  END,SUBJECT, WINNER;  

CREATE TABLE item_mast (
    PRO_ID INT,
    PRO_NAME VARCHAR(50),
    PRO_PRICE INT,
    PRO_COM INT
);

INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (101, 'Mother Board', 3200, 15);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (102, 'Key Board', 450, 16);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (103, 'ZIP drive', 250, 14);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (104, 'Speaker', 550, 16);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (105, 'Monitor', 5000, 11);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (106, 'DVD drive', 900, 12);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (107, 'CD drive', 800, 12);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (108, 'Printer', 2600, 13);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (109, 'Refill cartridge', 350, 13);
INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES (110, 'Mouse', 250, 12);

select pro_name from item_mast where pro_price between 200 and 600;
select avg(pro_price) as average_price from item_mast where pro_com=16;
select pro_name , pro_price* 23 as price_in_rs from item_mast ;
select pro_price, pro_name from item_mast where pro_price >=250 order by pro_price desc , pro_name asc;
select pro_com, avg(pro_price) as average_price from item_mast group by pro_com;
select pro_name , pro_price from item_mast where pro_price = (select min(pro_price) from item_mast);

CREATE TABLE employee (
    EMP_IDNO INT,
    EMP_FNAME VARCHAR(50),
    EMP_LNAME VARCHAR(50),
    EMP_DEPT INT
);

INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (127323, 'Michale', 'Robbin', 57);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (526689, 'Carlos', 'Snares', 63);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (843795, 'Enric', 'Dosio', 57);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (328717, 'Jhon', 'Snares', 63);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (444527, 'Joseph', 'Dosni', 47);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (659831, 'Zanifer', 'Emily', 47);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (847674, 'Kuleswar', 'Sitaraman', 57);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (748681, 'Henrey', 'Gabriel', 47);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (555935, 'Alex', 'Manuel', 57);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (539569, 'George', 'Mardy', 27);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (733843, 'Mario', 'Saule', 63);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (631548, 'Alan', 'Snappy', 27);
INSERT INTO employee (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES (839139, 'Maria', 'Foster', 57);

select distinct emp_lname from employee ;
select * from employee where emp_lname = 'Snares';
SELECT EMP_DEPT, EMP_IDNO, EMP_FNAME, EMP_LNAME FROM employee
GROUP BY EMP_DEPT, EMP_IDNO, EMP_FNAME, EMP_LNAME ORDER BY EMP_DEPT, EMP_IDNO;

*/

---------------------------------CREATE--TABLE---(WITH DATE)---------------------------------------
create table employee(
employee_id NUMBER not null,
fname VARCHAR2(20),
lname VARCHAR2(20),
salary NUMBER(12,2),
jdate VARCHAR2(40),
depart varchar(20),
gender VARCHAR2(10),
PRIMARY KEY(employee_id)
);
INSERT ALL
    INTO employee VALUES (2, 'Nikita', 'Jain', 530000, '2014-01-09 17:31:07.793', 'HR', 'F')
    INTO employee VALUES (3, 'Ashish', 'Kumar', 1000000, '2014-01-09 10:05:07.793', 'IT', 'Male')
    INTO employee VALUES (4, 'Nikhil' ,'Sharma', 480000, '2014-01-09 08:00:07.793', 'HR', 'Male')
    INTO employee VALUES (5, 'Anish', 'Kadian', 500000, '2014-01-09 09:31:07.793', 'Payroll', 'Male')
    SELECT 1 FROM DUAL;

CREATE table projdetail(
proj_id NUMERIC not null,
employee_id NUMERIC not null,
proj_name VARCHAR2(20),
PRIMARY KEY(proj_id),
FOREIGN KEY(employee_id)REFERENCES employee(employee_id)
);

INSERT ALL
into projdetail VALUES (1,1,'Task Track')
into projdetail VALUES (2,1,'CLP')
into projdetail VALUES(3,1,'Survey Management')
into projdetail VALUES(4,2,'Hr management')
into projdetail VALUES(5,3,'Task Track')
into projdetail VALUES(6,3,'GRS')
into projdetail VALUES(7,3,'DDS')
into projdetail VALUES(8,4,'Hr management')
SELECT 1 FROM dual;

SELECT * FROM employee,projdetail
WHERE employee.employee_id = projdetail.employee_id;

--------------------------------PL/SQL----------------------------
SET SERVEROUTPUT ON

DECLARE

message varchar2(20):= 'Hello, World!';

BEGIN

dbms_output.put_line(message);

END;
/  

DECLARE

 SUBTYPE name IS varchar(10);
 SUBTYPE message IS varchar2(100);
 salutation name;
 greetings message;
 
BEGIN

 salutation := 'Reader ';
 greetings := 'Welcome to the World of PL/SQL';
 dbms_output.put_line('Hello ' || salutation || greetings);
 
END;
/

DECLARE

 a integer := 10;
 b integer := 20;
 c integer;
 f real;
 
BEGIN

 c := a + b;
 dbms_output.put_line('Value of c: ' || c);
 f := 70.0/3.0;
 dbms_output.put_line('Value of f: ' || f);
 
END;
/

CREATE TABLE CUSTOMERS(
   ID   INT NOT NULL,
   NAME VARCHAR (20) NOT NULL,
   AGE INT NOT NULL,
   ADDRESS CHAR (25),
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID)
);
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );
 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );
 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );
 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );
 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (6, 'Komal', 22, 'MP', 4500.00 );
